#include <Arduino.h>
#include <esp_camera.h>
#include <FS.h>
#include <SD.h>
#include <SPI.h>
#include "Adafruit_VEML7700.h"

#define CAMERA_MODEL_XIAO_ESP32S3
#include "camera_pins.h"

bool camera_status = false;
bool sd_status = false;
int fileCount = 1;
int threshold = 1500;
bool touch1detected = false;

Adafruit_VEML7700 veml = Adafruit_VEML7700();

void photo_save(const char *fileName) {
  camera_fb_t *fb = esp_camera_fb_get();
  if (!fb) {
    Serial.println("Failed to get camera frame buffer");
    return;
  }
  writeFile(SD, fileName, fb->buf, fb->len);
  esp_camera_fb_return(fb);
  Serial.println("Photo saved to file");
}

void writeFile(fs::FS &fs, const char *path, uint8_t *data, size_t len) {
  Serial.printf("Writing file: %s\r\n", path);

  File file = fs.open(path, FILE_WRITE);
  if (!file) {
    Serial.println("Failed to open file for writing");
    return;
  }
  if (file.write(data, len) == len) {
    Serial.println("File written");
  } else {
    Serial.println("Write failed");
  }
  file.close();
}

void gotTouch1() {
  touch1detected = true;
}

void CameraParameters() {
  camera_config_t config;
  config.ledc_channel = LEDC_CHANNEL_0;
  config.ledc_timer = LEDC_TIMER_0;
  config.pin_d0 = Y2_GPIO_NUM;
  config.pin_d1 = Y3_GPIO_NUM;
  config.pin_d2 = Y4_GPIO_NUM;
  config.pin_d3 = Y5_GPIO_NUM;
  config.pin_d4 = Y6_GPIO_NUM;
  config.pin_d5 = Y7_GPIO_NUM;
  config.pin_d6 = Y8_GPIO_NUM;
  config.pin_d7 = Y9_GPIO_NUM;
  config.pin_xclk = XCLK_GPIO_NUM;
  config.pin_pclk = PCLK_GPIO_NUM;
  config.pin_vsync = VSYNC_GPIO_NUM;
  config.pin_href = HREF_GPIO_NUM;
  config.pin_sscb_sda = SIOD_GPIO_NUM;
  config.pin_sscb_scl = SIOC_GPIO_NUM;
  config.pin_pwdn = PWDN_GPIO_NUM;
  config.pin_reset = RESET_GPIO_NUM;
  config.xclk_freq_hz = 20000000;
  config.frame_size = FRAMESIZE_UXGA;
  config.pixel_format = PIXFORMAT_JPEG;
  config.grab_mode = CAMERA_GRAB_WHEN_EMPTY;
  config.fb_location = CAMERA_FB_IN_PSRAM;
  config.jpeg_quality = 12;
  config.fb_count = 1;

  esp_err_t err = esp_camera_init(&config);
  if (err != ESP_OK) {
    Serial.printf("Camera init failed with error 0x%x", err);
    return;
  }
}

void setup() {
  Serial.begin(115200);
  while (!Serial);

  touchAttachInterrupt(T1, gotTouch1, threshold);
  CameraParameters();
  camera_status = true;
  Serial.println("Camera OK!");

  if (!SD.begin(21)) {
    Serial.println("Failed to mount MicroSD Card!");
    while (1);
  }

  uint8_t cardType = SD.cardType();
  if (cardType == CARD_NONE) {
    Serial.println("No MicroSD card inserted!");
    return;
  }

  Serial.print("MicroSD Card Type: ");
  if (cardType == CARD_MMC) {
    Serial.println("MMC");
  } else if (cardType == CARD_SD) {
    Serial.println("SDSC");
  } else if (cardType == CARD_SDHC) {
    Serial.println("SDHC");
  } else {
    Serial.println("UNKNOWN");
  }
  sd_status = true;

  if (!veml.begin()) {
    Serial.println("Failed to initialize VEML7700!");
    while (1);
  }
  Serial.println("VEML7700 OK!");
}

void loop() {
  if (camera_status && sd_status) {
    if (touch1detected) {
      if (touchInterruptGetLastStatus(T1)) {
        Serial.println("Touched, take a picture");
        char imageFileName[32];
        sprintf(imageFileName, "/image%d.jpg", fileCount);
        photo_save(imageFileName);
        Serial.printf("Saving picture: %s\r\n", imageFileName);

        float lux = veml.readLux();
        Serial.print("Lux: ");
        Serial.println(lux);

        fileCount++;
      }
      touch1detected = false;
    }
    delay(80);
  }
}

